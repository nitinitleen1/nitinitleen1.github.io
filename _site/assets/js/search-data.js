var store = [{
        "title": "Setting up an Airflow Cluster",
        "excerpt":"Data-driven companies often hinge their business intelligence and product development on the execution of complex data pipelines. These pipelines are often referred to as data workflows, a term that can be somewhat opaque in that workflows are not limited to one specific definition and do not perform a specific set of functions per se. To orchestrate these workflows there are lot of schedulers like oozie, Luigi, Azkaban and Airflow. This blog demonstrate the setup of one of these orchestrator i.e Airflow. A shot intro: There are many orchestrators which are there in the technology space but Airflow provides a slight edge if our requirement hinges on of the following:   No cron – With Airflows included scheduler we don’t need to rely on cron to schedule our DAG and only use one framework (not like Luigi)  Code Bases – In Airflow all the workflows, dependencies, and scheduling are done in python code. Therefore, it is rather easy to build complex structures and extend the flows.  Language – Python is a language somewhat natural to pick up and was available on our team.However setting up a production grade setup required some effort and this blog address the same. Basic Tech Terms:   Metastore: Its a database which stores information regarding the state of tasks. Database updates are performed using an abstraction layer implemented in SQLAlchemy. This abstraction layer cleanly separates the function of the remaining components of Airflow from the database.  Executor: The Executor is a message queuing process that is tightly bound to the Scheduler and determines the worker processes that actually execute each scheduled task.  Scheduler: The Scheduler is a process that uses DAG definitions in conjunction with the state of tasks in the metadata database to decide which tasks need to be executed, as well as their execution priority. The Scheduler is generally run as a service.  Worker: These are the processes that actually execute the logic of tasks, and are determined by the Executor being used.AWS Architecture:  Airflow provides an option to utilize CeleryExecutor to execute tasks in distributed fashion. In this mode, we can run several servers each running multiple worker nodes to execute the tasks. This mode uses Celery along with a message queueing service RabbitMQ.The diagram show the interactivity between different component services i.e. Airflow(Webserver and Scheduler), Celery(Executor) and RabbitMQ and Metastore in an AWS Environment. For simplicity of the blog, we will demonstrate the setup of a single node master server and a single node worker server. Below is the following details for the setup:   EC2 Master Node - Running Scheduler and Webserver  EC2 Worker Node - Running Celery Executor and Workers  RDS Metastore - Storing information about metadata and dag  EC2 Rabbit MQ Nodes - Running RabbitMq brokerEnviornment Prerequisite:   Operating System: Ubuntu 16.04/Ubuntu 18.04 / Debian System  Python Environment: Python 3.5x  DataBase: PostgreSql v11.2 (RDS)Once the prerequisites are taken care of, we can proceed with the installation. Installation: The first step of the setup is the to configure the RDS Postgres database for airflow.For that we need to connect to RDS Database using using admin user.For the sake of simplicity we are using command line utility from one of the EC2 servers to connect to our RDS Server. For command line client installation for postgres database on debian system execute following commands to install and execute. -- Client Installationapt-get -y update apt-get install postgresql-clientOnce the client is installed try to connect to the Database using the admin user. -- Generating IAM Tokenexport RDSHOST=\"{host_name}\"export PGPASSWORD=\"$(aws rds generate-db-auth-token --hostname $RDSHOST --port 5432 --region{region} --username {admin_user} )\"-- Connecting to the Databasepsql \"host=hostName port=portNumber dbname=DBName user=userName -password\"sslmode and sslrootcert parameter is used when we are using SSL/TLS based connection. For more information refere here. Once the connection is established with the database create a database named airflow which will act as a primary source where all the metadata,scheduler and other information will be stored by airflow. CREATE DATABASE airflow;CREATE USER {DATABASE_USER} WITH PASSWORD ‘{DATABASE_USER_PASSWORD}’;GRANT ALL PRIVILEGES ON DATABASE airflow TO {DATABASE_USER};GRANT CONNECT ON DATABASE airflow TO {DATABASE_USER};Once the above step is done the next step is to setup rabbitMQ in one the EC2 server. To install it follow the steps defined below.   Login as root  Install RabbitMQ Server  Verify status  Install RabbitMQ Web Interfaceapt-get install rabbitmq-serverrabbitmqctl statusrabbitmq-plugins enable rabbitmq_managementEnable and start rabbitMQ server and add users and permissions to it. -- Enable rabbitMQ serverservice rabbitmq-server enableservice rabbitmq-server startservice rabbitmq-server status-- Add Users and permissionsrabbitmqctl add_user {RABBITMQ_USER} {RABBITMQ_USER_PASSWORD}rabbitmqctl set_user_tags {RABBITMQ_USER} administratorMake Virtual Host and Set Permission for the host. rabbitmqctl add_vhost {VIRTUALHOST_NAME}rabbitmqctl set_permissions -p {VIRTUALHOST_NAME}{RABBITMQ_USER} “.*” “.*” “.*”Download the rabbitadmin utility wget http://127.0.0.1:15672/cli/rabbitmqadminchmod +x rabbitmqadminOne Final step is to make a queue. ./rabbitmqadmin declare queue –username={RABBITMQ_USER} –password={RABBITMQ_USER_PASSWORD} –vhost={VIRTUALHOST_NAME} name={QUEUE_NAME} durable=trueWe can now access the RabbitMQ UI utility by hitting the public IP at port 15672. If you someone want to setup multiple machines to work as a RabbitMQ Cluster you can refere here.Now we have all the building blocks. The final step is to setup airflow using celery. Setting up of Airflow Using Celery :-   Install required libraries and dependencies for airflow on each node i.e worker and master.apt-get updateapt-get install build-essentialsudo apt-get install python3-pipapt-get install python-dev python3-dev libsasl2-dev gccapt-get install libffi-devapt-get install libkrb5-devapt-get install python-pandas-- To get the pip version which pip  Install airflow and celery on each of the machine.pip install pyamqppip install psycopg2pip install apache-airflow[postgres,rabbitmq,celery]airflow version--Celery Installation pip install celery==4.3.0-- Initializing airflowexport AIRFLOW_HOME=~/airflow #(provide any directory for airflow home)airflow initdbConfiguration: We now have airflow installed on all the nodes we have to change but to detect external database and broker we need to do conf changes hence to do that, Edit the ~/airflow/aiflow.cfg on all the nodes -- On Nodes change following parametersexecutor= CeleryExecutorsql_alchemy_conn= postgresql+psycopg2://airflow:airflow@{HOSTNAME}/airflow broker_url= pyamqp://guest:guest@{RabbitMQ-HOSTNAME}:5672/celery_result_backend= db+postgresql://airflow:airflow@{HOSTNAME}/airflow dags_are_paused_at_creation= Trueload_examples= Falsedefault_queue= {QUEUE_NAME}Once the changes are done run reload apache to detect those change on each node: airflow initdbStart webserver and schduler on Master Node and Worker on Second i.e Worker Node and we are done!!! -- Node 1 (Master Node)airflow webserver -p 8000airflow scheduler-- Node 2 (Worker Node)airflow workerThe only things is left is to synchronize the dags across the machines i.e master and worker.There are multiple ways to synchronise but for simplicity I created a cron in each machine which will sync my git repo from the remote git repositories to the folder my dags code were located. -- Remove any unneccessary files from dag foldercd ~/airflow/dagsrm -rf *-- Clone dags from git reposudo apt-get update &amp;&amp; sudo apt-get install gitcd ~/airflow/dagsgit clone URL .-- Creating a cron for pulling every 5 mins crontab -e* */5 * * * cd {aboslute_path}/airflow/dags &amp;&amp; git pullHowever this is not a production grade implementation as I would recommed either a common mountpoint like EFS or any General NFS Servers or using a configuration Management tool like ansible, chef or puppet. More Tuning:   Parallelism : This parameter determines the maximum number of task instances that can be actively running in parallel across the entire airflow deployment. For example, if it is set to 10 there can’t be more than 10 tasks running irrespective of the number of dags. Hence, this is the maximum number of active tasks at any time. Set it depending upon no of machines in a cluster i.e for one Node 16 is recommended.  Dag Concurrency : This parameter determines the number of task instances that can be scheduled per DAG.  worker_concurrency : This parameter determines the number of tasks each worker node can run at any given time. For example, if it is set to 10 then the worker node can concurrently execute 10 tasks that have been scheduled by the schedule.References:   Making Apache Airflow Highly Available  Best Practices for Setup Airflow   Common mistakes and Challenges while running Multinode Airflow  Airflow documentation  How to Connect to RDS Postgres","categories": ["Airflow"],
        "tags": ["airflow","postgresql","data-pipeline","aws","rabbitmq"],
        "url": "http://localhost:4000/scaling-out-airflow/"
      },{
        "title": "The Two Sum Problem - LeetCode",
        "excerpt":"The Two Sum Problem The Two Sum problem is a classic coding question often asked in programming interviews. The problem statement is as follows: Given an array of integers nums and an integer target value target, find two numbers in the array that add up to the target and return their indices. Here’s an example to illustrate the problem: Input: nums = [2, 7, 11, 15], target = 9Output: [0, 1]Explanation: The numbers at indices 0 and 1 (2 and 7) add up to 9.Approach and Solution To solve the Two Sum problem, we can use a simple approach that utilizes a hashmap to store the complement of each number as we iterate through the array. Here’s the step-by-step solution in Python: def twoSum(nums, target):    # Create an empty hashmap    hashmap = {}    # Iterate through the array    for i, num in enumerate(nums):        # Calculate the complement        complement = target - num        # Check if the complement is already in the hashmap        if complement in hashmap:            # Return the indices of the two numbers            return [hashmap[complement], i]        # Add the current number and its index to the hashmap        hashmap[num] = i    # If no solution is found, return an empty list    return []  We initialize an empty dictionary num_dict to store numbers and their indices.  We iterate through the array using the enumerate() function to access both the indices and the corresponding numbers.  For each number, we calculate its complement by subtracting it from the target.  We check if the complement exists in num_dict. If it does, we have found the two numbers that add up to the target, and we return their indices.  If the complement is not in num_dict, we add the current number and its index to the dictionary for future reference.  If we exhaust the array without finding a solution, we return an empty list.Let’s test the solution with a sample input: nums = [2, 7, 11, 15]target = 9print(twoSum(nums, target))Output: [0, 1]Complexity Analysis The above solution has a time complexity of O(n) since we iterate through the array once. The space complexity is also O(n) since we use a hashmap to store the numbers and their indices. Conclusion Through this blog post, we explored the popular LeetCode problem “Two Sum” and provided a detailed solution using a hash table. The key takeaway from this problem is to leverage data structures effectively to optimize our algorithms. LeetCode offers a myriad of challenges like this one, allowing programmers to enhance their problem-solving skills and gain confidence in tackling coding interviews. Remember, practice makes perfect! ","categories": ["Programming"],
        "tags": ["leetcode","python","algorithms"],
        "url": "http://localhost:4000/leetcode-two-sum/"
      }]
